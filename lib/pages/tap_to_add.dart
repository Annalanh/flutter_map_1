import 'package:flutter/material.dart';
import 'dart:async';
import 'dart:convert';
import 'dart:math';
import 'package:flutter_map/flutter_map.dart';
import 'package:latlong/latlong.dart';
import 'package:http/http.dart' as http;

Future<Post> fetchPost() async{
  final response = await http.get('https://jsonplaceholder.typicode.com/posts/1');

  if(response.statusCode == 200){
    return Post.fromJson(json.decode(response.body));
  }else{
    throw Exception('Failed to load post');
  }

}
class Post{
  final int userId;
  final int id;
  final String title;
  final String body;

  Post({this.userId, this.id, this.title, this.body});

  factory Post.fromJson(Map<String, dynamic> json){
    return Post(
      userId: json['userId'],
      id: json['id'],
      title: json['title'],
      body: json['body'],     
    );
  }
}
class TapToAdd extends StatefulWidget{

  @override
  State<TapToAdd> createState(){
    return TapToAddState();    
  }
}
class TapToAddState extends State<TapToAdd>{
  Future<Post> post;
  final GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey<ScaffoldState>();
  LatLng tapPoint;
  var address;
  @override 
  void initState(){
    super.initState();
    post = fetchPost();
  }
  Widget build(BuildContext context){
    var marker = [Marker(
          width: 50.0,
          height: 50.0,
          point: tapPoint,
          builder: (cxt) => Container(
            child: IconButton(
              icon: Icon(Icons.location_on),
              color: Colors.red,
              iconSize: 50.0,
              onPressed: (){
                print('click marker');
              },
            )
          )
        )];
    return Scaffold(
      key: _scaffoldKey,
      appBar: AppBar(
        title: new FutureBuilder<Post>(
          future: post,
          builder: (context, snapshot){
            if(snapshot.hasData){
              return Text(snapshot.data.title);
            }else if (snapshot.hasError){
              return Text("${snapshot.error}");
            }
            return CircularProgressIndicator();
          }
        )   
      ),
      body: FlutterMap(
        options: MapOptions(
          center: LatLng(21.0384119,105.7830298),
          zoom: 13.0,
          onTap: _handleTap
          ,
        ),
        layers: [
          TileLayerOptions(
            urlTemplate: 'https://vmap.vn/tiles/{z}/{x}/{y}.png',
          ),
          MarkerLayerOptions(
            markers: marker
          )
        ],
      )
    );
  }
  void _handleTap(LatLng latlng){
    setState((){
      tapPoint = latlng;
    });
    print(latlng);
    _calculateMarketPoint(latlng);
    final snackBar = SnackBar(
      content: Text(latlng.latitude.toString()+'/'+latlng.longitude.toString()),
      action: SnackBarAction(
        label: 'Undo',
        onPressed: () {
          print(latlng);
        },
      ),
    );
    _scaffoldKey.currentState.showSnackBar(snackBar);
  }

  void _calculateMarketPoint(LatLng latLng){
    var x1 = latLng.latitude;
    var y1 = latLng.longitude;

    var range = [0.5, 1.0, 2.0, 3.0, 9999999999.0];
    var numInRange = [0, 0, 0, 0, 0, 0];

    for(var i = 0; i < marketdata.length; i+= 2){
      var x2 = marketdata[i + 1];
      var y2 = marketdata[i];

      var distance = getDistance(x1, y1, x2, y2);
      for(var j = 0; j < range.length; j++){
        if(distance <= range[j]) numInRange[j + 1] += 1;
      }
    }
    print(numInRange[1]);
    print(numInRange[2]);
    print(numInRange[3]);
    print(numInRange[4]);
    print(numInRange[5]);
    
  }
  double getDistance(double lat1, double lon1, double lat2, double lon2){
    var R = 6371; // Radius of the earth in km
    var dLat = (lat2 - lat1)* (pi / 180); // deg2rad below
    var dLon = (lon2 - lon1)* (pi/180);
    var a = 
      sin(dLat/2)*sin(dLat/2) + 
      cos(lat1* (pi / 180)) * cos(lat2*(pi / 180))*
      sin(dLon /2)*sin(dLon /2);
    var c = 2 * atan2(sqrt(a), sqrt(1 - a));
    var d = R * c; 
    return d;
  }
  var marketdata = [105.7784042, 21.01021957,
    105.7781067, 21.00582314,
    105.7633286, 21.01065636,
    105.7915649, 21.02070236,
    105.7993927, 21.01362228,
    105.7771912, 21.01953125,
    105.7985992, 21.01169014,
    105.7881317, 21.01301193,
    105.7751999, 21.04259872,
    105.774999, 21.043957,
    105.7810974, 21.03592873,
    105.7859116, 21.03664398,
    105.77771, 21.03130722,
    105.781743, 21.03506378,
    105.7887344, 21.0349865,
    105.7601318, 21.04202843,
    105.7922897, 21.03230667,
    105.7817307, 21.03663445,
    105.7951279, 21.0364399,
    105.7947006, 21.044981,
    105.786232, 21.04318428,
    105.7814407, 21.06104088,
    105.7873688, 21.06958961,
    105.7846832, 21.05629349,
    105.7899017, 21.04933929,
    105.7877426, 21.0684948,
    105.7881622, 21.06890106,
    105.7581635, 21.05208206,
    105.8077927, 21.06397629,
    105.7989044, 21.07139587,
    105.7914352, 21.07143784,
    105.8069077, 21.06360626,
    105.8272489, 21.06732889,
    105.8273272, 21.06847694,
    105.833605, 21.06391306,
    105.7989273, 21.07136345,
    105.7515335, 21.08643532,
    105.786656, 21.114989,
    105.8100967, 21.08549309,
    105.778122, 21.09111977,
    105.7746201, 21.08940125,
    105.8504562, 21.03801155,
    105.826651, 21.036641,
    105.8489075, 21.03798294,
    105.8510467, 21.04052694,
    105.848784, 21.036762,
    105.8497953, 21.03594099,
    105.8418721, 21.04386672,
    105.8422165, 21.04398537,
    105.8265991, 21.03655624,
    105.8314972, 21.03371811,
    105.8186722, 21.04310417,
    105.8101654, 21.03427505,
    105.8144302, 21.03754234,
    105.8174591, 21.04034233,
    105.8248138, 21.04158783,
    105.8080673, 21.04412079,
    105.7998276, 21.03483009,
    105.8096085, 21.0442524,
    105.8252487, 21.02716827,
    105.8147354, 21.02263832,
    105.8199463, 21.02339554,
    105.8227625, 21.02667222,
    105.8053742, 21.02386093,
    105.8020172, 21.01986885,
    105.8009872, 21.03026772,
    105.8150864, 21.02891159,
    105.8036957, 21.01405144,
    105.8076248, 21.01329422,
    105.8228073, 21.01375008,
    105.8197403, 21.0158577,
    105.8260846, 21.01745434,
    105.8157425, 21.00839424,
    105.8128128, 21.01009178,
    105.8177414, 21.01393127,
    105.8086929, 21.01253128,
    105.8114014, 21.01056862,
    105.8355408, 21.00633621,
    105.8123169, 20.99793625,
    105.8186722, 21.00215149,
    105.8240128, 21.00229073,
    105.8259506, 21.00589943,
    105.8131485, 21.00629616,
    105.8125992, 21.002985,
    105.8130722, 21.00597763,
    105.8131867, 21.00306702,
    105.8163757, 20.99960327,
    105.8321457, 21.00408173,
    105.8620148, 20.9835968,
    105.8752899, 20.98370934,
    105.8484955, 20.98094559,
    105.86306, 20.99147034,
    105.8620148, 20.9835968,
    105.8600578, 20.9823175,
    105.8599872, 20.98113306,
    105.8634796, 20.99152756,
    105.8422086, 20.98412814,
    105.8435745, 20.98564529,
    105.8747864, 20.98389053,
    105.8403549, 20.99159813,
    105.8464508, 20.98653984,
    105.842865, 20.98575211,
    105.8532944, 20.99115944,
    105.8739548, 20.98418617,
    105.8818207, 20.98115158,
    105.8866959, 20.9800148,
    105.8579102, 20.98447609,
    105.883395, 21.0004869,
    105.8599777, 21.00958443,
    105.851471, 21.01692963,
    105.8460541, 21.0015316,
    105.8450546, 20.9967041,
    105.8723984, 21.00120926,
    105.8616867, 20.99933815,
    105.845459, 21.00181389,
    105.8612366, 20.99880981,
    105.8616894, 21.00315639,
    105.8528214, 21.0099678,
    105.8634262, 21.00882721,
    105.861145, 21.01178169,
    105.886528, 20.99780273,
    105.853569, 21.01287079,
    105.8601608, 21.00958252,
    105.8392487, 20.99924469,
    105.8389053, 21.01794243,
    105.8345795, 21.01610565,
    105.8528748, 21.01762772,
    105.8415756, 21.02802086,
    105.8452061, 21.03212528,
    105.8529925, 21.03222582,
    105.8390808, 21.02659035,
    105.8351135, 21.02232933,
    105.8245544, 21.03214073,
    105.8782806, 21.0533905,
    105.9165039, 21.06216812,
    105.9020844, 21.05804253,
    105.8742371, 21.04819107,
    105.8835831, 21.06451225,
    105.8884659, 21.06023407,
    105.8870989, 21.05153722,
    105.8927155, 21.05981445,
    105.90165, 21.05688333,
    105.8879166, 21.06967354,
    105.9045944, 21.07107925,
    105.947727, 21.079204,
    105.8667374, 21.05566025,
    105.9002914, 21.07173729,
    105.887085, 21.02750397,
    105.9257202, 21.04327393,
    105.9080124, 21.00536728,
    105.8750839, 21.04735756,
    105.9256287, 21.04323006,
    105.8699036, 21.03411674,
    105.8758926, 21.04667282,
    105.903122, 21.02176094,
    105.9205856, 21.03111076,
    105.9150391, 21.03137779,
    105.9026337, 21.03960228,
    105.9115372, 21.03552818,
    105.8419876, 20.94550514,
    105.8406296, 20.95785332,
    105.8424454, 20.9503212,
    105.8319016, 20.95327759,
    105.7931392, 20.95713028,
    105.7876129, 20.95979691,
    105.8422808, 20.93832778,
    105.8797449, 20.87133334,
    105.887957, 20.909382,
    105.761668, 20.829564,
    105.77612, 20.726728,
    105.518635, 21.028042,
    105.6661806, 21.0582106,
    105.5054272, 21.14703555,
    105.818718, 20.96746445,
    105.8217468, 20.96110916,
    105.8150178, 20.96553224,
    105.7758408, 20.97213936,
    105.7862396, 20.96989441,
    105.7552872, 20.971138,
    105.7953033, 20.96673584,
    105.76216, 20.95899583,
    105.7800903, 20.97044373,
    105.7900467, 20.97380447,
    105.7778168, 20.97364044,
    105.7660141, 20.9667778,
    105.78051, 20.96994019,
    105.7957916, 20.97642136,
    105.782898, 20.980196,
    105.782898, 20.980196,
    105.7465515, 20.97810936,
    105.7943039, 20.98529434,
    105.8004379, 20.97920609,
    105.7755, 20.97833333,
    105.7934113, 20.9856472,
    105.7867508, 20.97665024,
    105.7875977, 20.98933029,
    105.799469, 20.9898243,
    105.7732391, 20.97973824,
    105.78050995, 20.96994019
];
}
